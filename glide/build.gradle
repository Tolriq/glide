apply plugin: 'java'

evaluationDependsOn(':third_party:gif_decoder')
evaluationDependsOn(':third_party:disklrucache')
evaluationDependsOn(':library')

def getAndroidSdkDirectory() {
  project(':library').android.sdkDirectory
}

def getAndroidCompileSdkVersion() {
  project(':library').android.compileSdkVersion
}

def getInternalAndroidProjects() {
    [':third_party:gif_decoder', ':third_party:gif_encoder', ':library'].collect { project(it) }
}
def getInternalJavaProjects() {
    [':third_party:disklrucache'].collect { project(it) }
}

def getAllInternalProjects() {
    getInternalAndroidProjects() + getInternalJavaProjects()
}

def getReleaseVariantAndroidProjects() {
    getAndroidLibraryVariants('release')
}

def getAndroidLibraryVariants(variantName) {
    getInternalAndroidProjects().collect { project ->
        project.android.libraryVariants.findAll { type ->
            type.buildType.name.equalsIgnoreCase(variantName)
        }
    }.sum()
}

def getSourceFilesForVariant(variantName) {
    getAndroidLibraryVariants(variantName).collect { it.javaCompile.source } +
            getInternalJavaProjects().collect { it.sourceSets.main.allJava }
}

def getAndroidJar() {
    "${getAndroidSdkDirectory()}/platforms/${getAndroidCompileSdkVersion()}/android.jar"
}

jar {
    from files(
            getReleaseVariantAndroidProjects().collect { variant ->
                variant.javaCompile.destinationDir
            }
    )
    exclude "**/R.class"
    exclude "**/BuildConfig.class"
    from files(getInternalJavaProjects().collect { it.sourceSets.main.output })
}

getAllInternalProjects().each { project ->
    jar.dependsOn(project.tasks.build)
}

apply from: "$rootProject.projectDir/scripts/upload.gradle"